// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PandesalExpress.Infrastructure.Context;

#nullable disable

namespace PandesalExpress.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250716102025_AddPdndEntitiesWithAuditFields")]
    partial class AddPdndEntitiesWithAuditFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Ulid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("char(26)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Ulid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(26)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Ulid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(26)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Ulid>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(26)");

                    b.Property<string>("RoleId")
                        .HasColumnType("char(26)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Ulid>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(26)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Attendance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<TimeSpan?>("CheckIn")
                        .HasColumnType("interval")
                        .HasColumnName("check_in");

                    b.Property<TimeSpan?>("CheckOut")
                        .HasColumnType("interval")
                        .HasColumnName("check_out");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("employee_id");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<string>("StoreId")
                        .HasColumnType("char(26)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("attendances");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("name");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PagIbigNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("pagibig_number");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhilHealthNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("philhealth_number");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("varchar(180)")
                        .HasColumnName("position");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SssNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("sss_number");

                    b.Property<string>("StoreId")
                        .HasColumnType("char(26)")
                        .HasColumnName("store_id");

                    b.Property<string>("TinNumber")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("tin_number");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PagIbigNumber")
                        .IsUnique();

                    b.HasIndex("PhilHealthNumber")
                        .IsUnique();

                    b.HasIndex("SssNumber")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.HasIndex("TinNumber")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Payroll", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("base_salary");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("bonus");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("LoanDeduction")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("loan_deduction");

                    b.Property<decimal>("Overtime")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("overtime");

                    b.Property<decimal>("PagIbigDeduction")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("pagibig_deduction");

                    b.Property<decimal>("PhilHealthDeduction")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("philhealth_deduction");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<decimal>("SssDeduction")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("sss_deduction");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("tax");

                    b.Property<decimal>("TotalSalary")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_salary");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("payrolls");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.PdndRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<string>("CommissaryId")
                        .HasColumnType("char(26)")
                        .HasColumnName("commissary_id");

                    b.Property<string>("CommissaryNotes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("commissary_notes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateNeeded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_needed");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("char(26)")
                        .HasColumnName("last_updated_by");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_date");

                    b.Property<string>("RequestingEmployeeId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("requesting_employee_id");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("StatusLastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_last_updated");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CommissaryId");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("RequestingEmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("pdnd_requests");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.PdndRequestItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PdndRequestId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("pdnd_request_id");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(180)")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PdndRequestId");

                    b.HasIndex("ProductId");

                    b.ToTable("pdnd_request_items");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(180)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("shift");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.SalesLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("employee_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(180)")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Shift")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("shift");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("store_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.ToTable("sales_logs");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.SalesLogItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("PriceAtSale")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price_at_sale");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("SalesLogId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("sales_log_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesLogId");

                    b.ToTable("sales_log_items");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time")
                        .HasColumnName("closing_time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(90)")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time")
                        .HasColumnName("opening_time");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<DateTime?>("StocksDateVerified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stocks_date_verified");

                    b.Property<string>("StoreKey")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("store_key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("StoreKey")
                        .IsUnique();

                    b.ToTable("stores");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.StoreInventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastVerified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_verified");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("store_inventories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Ulid>", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Ulid>", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Ulid>", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Ulid>", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Ulid>", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Attendance", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.Store", null)
                        .WithMany("Attendances")
                        .HasForeignKey("StoreId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Employee", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.Store", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Payroll", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", "Employee")
                        .WithMany("Payrolls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.PdndRequest", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", "Commissary")
                        .WithMany()
                        .HasForeignKey("CommissaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", "LastUpdatedByEmployee")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", "RequestingEmployee")
                        .WithMany("PdndRequests")
                        .HasForeignKey("RequestingEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.Store", "Store")
                        .WithMany("PdndRequests")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commissary");

                    b.Navigation("LastUpdatedByEmployee");

                    b.Navigation("RequestingEmployee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.PdndRequestItem", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.PdndRequest", "PdndRequest")
                        .WithMany("PdndRequestItems")
                        .HasForeignKey("PdndRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PdndRequest");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.SalesLog", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Employee", "Employee")
                        .WithMany("SalesLogProcessed")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.Store", "Store")
                        .WithMany("SalesLogs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.SalesLogItem", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Product", "Product")
                        .WithMany("SalesLogItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.SalesLog", "SalesLog")
                        .WithMany("SalesLogItems")
                        .HasForeignKey("SalesLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesLog");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.StoreInventory", b =>
                {
                    b.HasOne("PandesalExpress.Infrastructure.Models.Product", "Product")
                        .WithMany("StoreInventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PandesalExpress.Infrastructure.Models.Store", "Store")
                        .WithMany("StoreInventories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Payrolls");

                    b.Navigation("PdndRequests");

                    b.Navigation("SalesLogProcessed");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.PdndRequest", b =>
                {
                    b.Navigation("PdndRequestItems");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Product", b =>
                {
                    b.Navigation("SalesLogItems");

                    b.Navigation("StoreInventories");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.SalesLog", b =>
                {
                    b.Navigation("SalesLogItems");
                });

            modelBuilder.Entity("PandesalExpress.Infrastructure.Models.Store", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Employees");

                    b.Navigation("PdndRequests");

                    b.Navigation("SalesLogs");

                    b.Navigation("StoreInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
